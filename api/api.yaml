openapi: 3.0.0
info:
  description: API for the TeamPickr app
  version: '1.0.0'
  title: TeamPickr
  contact:
    email: david.saltares@gmail.com
  license:
    name: MIT
    url: 'https://github.com/dsaltares/teamfindr/blob/main/LICENSE'
paths:
  /auth/verify:
    get:
      summary: verifies that the session for the user is valid
      operationId: verifyUser
      responses:
        '200':
          description: authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifySuccessResponse'
        '401':
          description: the session for the user is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    get:
      summary: logs the user out
      operationId: logOut
      responses:
        '301':
          description: redirect to the application

  /users/{userId}:
    patch:
      summary: patches a user
      operationId: patchUser
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        '200':
          description: authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchUserResponse'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: not authorized to update the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: the session for the user is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /venues:
    post:
      summary: creates a venue
      operationId: postVenue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVenueRequest'
      responses:
        '201':
          description: new venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostVenueResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '403':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: gets a list of venues
      operationId: getVenues
      parameters:
        - in: query
          name: lat
          schema:
            type: number
          required: false
          description: latitude
        - in: query
          name: lon
          schema:
            type: number
          required: false
          description: longitude
        - in: query
          name: radius
          schema:
            type: number
          required: false
          description: radius in m
      responses:
        '200':
          description: list of venues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVenuesResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /venues/{venueId}:
    get:
      summary: gets a venue by its id
      operationId: getVenue
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: id of the venue
      responses:
        '200':
          description: venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVenueResponse'
        '404':
          description: venue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: the session for the user is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /events:
    post:
      summary: creates an event
      operationId: postEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEventRequest'
      responses:
        '201':
          description: new event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostEventResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: venue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: gets a list of events
      operationId: getEvents
      parameters:
        - in: query
          name: lat
          schema:
            type: number
          required: false
          description: latitude
        - in: query
          name: lon
          schema:
            type: number
          required: false
          description: longitude
        - in: query
          name: radius
          schema:
            type: number
          required: false
          description: radius in m
        - in: query
          name: sports
          schema:
            type: string
          required: false
          description: sport to filter by
        - in: query
          name: date
          schema:
            type: string
            format: date-time
          required: false
          description: date of the event
        - in: query
          name: excludeFull
          schema:
            type: boolean
          required: false
          description: whether to exclude full events
      responses:
        '200':
          description: list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventsResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}:
    get:
      summary: gets an event by its id
      operationId: getEvent
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: id of the event
      responses:
        '200':
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventResponse'
        '404':
          description: event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: the session for the user is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    VerifySuccessResponse:
      type: object
      required:
        - user
        - cookies
      properties:
        user:
          $ref: '#/components/schemas/User'
        cookies:
          $ref: '#/components/schemas/Cookies'
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    PatchUserRequest:
      type: object
      required:
        - user
      properties:
        user:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatar:
              type: string
    PatchUserResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    PostVenueRequest:
      type: object
      required:
        - venue
      properties:
        venue:
          type: object
          required:
            - name
            - location
          properties:
            name:
              type: string
            location:
              $ref: '#/components/schemas/Location'
    PostVenueResponse:
      type: object
      required:
        - venue
      properties:
        venue:
          $ref: '#/components/schemas/Venue'
    GetVenuesResponse:
      type: object
      required:
        - venues
      properties:
        venues:
          $ref: '#/components/schemas/Venues'
    GetVenueResponse:
      type: object
      required:
        - venue
      properties:
        venue:
          $ref: '#/components/schemas/Venue'
    PostEventRequest:
      type: object
      required:
        - event
      properties:
        venue:
          type: object
          required:
            - venue
            - sport
            - startsAt
            - duration
            - capacity
            - description
            - price
          properties:
            startsAt:
              type: string
              format: date-time
            venue:
              type: string
            sport:
              $ref: '#/components/schemas/Sport'
            duration:
              type: number
            capacity:
              type: number
            description:
              type: string
            price:
              $ref: '#/components/schemas/Price'
    PostEventResponse:
      type: object
      required:
        - event
      properties:
        event:
          $ref: '#/components/schemas/Event'
    GetEventsResponse:
      type: object
      required:
        - events
      properties:
        events:
          $ref: '#/components/schemas/Events'
    GetEventResponse:
      type: object
      required:
        - event
      properties:
        events:
          $ref: '#/components/schemas/Event'
    User:
      type: object
      required:
        - id
        - email
        - createdAt
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        avatar:
          type: string
    Cookies:
      type: object
      required:
        - session
        - session.sig
      properties:
        session:
          type: string
        session.sig:
          type: string
    Coordinates:
      type: array
      items:
        type: number
      minItems: 2
      maxItems: 2
    GeoType:
      type: string
      enum: [Point]
    GeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          $ref: '#/components/schemas/GeoType'
        coordinates:
          $ref: '#/components/schemas/Coordinates'
    LocationType:
      type: string
      enum: [house, street, district, city, county, country, locality]
    Location:
      type: object
      required:
        - geo
        - name
      properties:
        geo:
          $ref: '#/components/schemas/GeoJSON'
        name:
          type: string
        description:
          type: string
        country:
          type: string
        city:
          type: string
        postcode:
          type: string
        number:
          type: string
        street:
          type: string
        type:
          $ref: '#/components/schemas/LocationType'
    Venue:
      type: object
      required:
        - id
        - createdAt
        - name
        - location
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
    Venues:
      type: array
      items:
        $ref: '#/components/schemas/Venue'
    Sport:
      type: string
      enum:
        [
          Football,
          Basketball,
          Tennis,
          Squash,
          Volleyball,
          Handball,
          Padel,
          Badminton,
          Table tennis,
        ]
    Currency:
      type: string
      enum: [EUR, GBP, USD, RON]
    Price:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
        currency:
          $ref: '#/components/schemas/Currency'
    Event:
      type: object
      required:
        - id
        - createdAt
        - venue
        - sport
        - startsAt
        - duration
        - capacity
        - numParticipants
        - description
        - participants
        - createdBy
        - price
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        startsAt:
          type: string
          format: date-time
        venue:
          $ref: '#/components/schemas/Venue'
        sport:
          $ref: '#/components/schemas/Sport'
        duration:
          type: number
        capacity:
          type: number
        numParticipants:
          type: number
        description:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        createdBy:
          $ref: '#/components/schemas/User'
        price:
          $ref: '#/components/schemas/Price'
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
