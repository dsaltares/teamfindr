openapi: 3.0.0
info:
  description: API for the TeamPickr app
  version: '1.0.0'
  title: TeamPickr
  contact:
    email: david.saltares@gmail.com
  license:
    name: MIT
    url: 'https://github.com/dsaltares/teamfindr/blob/main/LICENSE'
paths:
  /auth/verify:
    get:
      summary: verifies that the session for the user is valid
      operationId: verifyUser
      responses:
        '200':
          description: authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifySuccessResponse'
        '401':
          description: the session for the user is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    get:
      summary: logs the user out
      operationId: logOut
      responses:
        '301':
          description: redirect to the application

  /users/{userId}:
    patch:
      summary: patches a user
      operationId: patchUser
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: id of the user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        '200':
          description: authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchUserResponse'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: not authorized to update the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: the session for the user is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /venues:
    post:
      summary: creates a venue
      operationId: postVenue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVenueRequest'
      responses:
        '201':
          description: new venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostVenueResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    VerifySuccessResponse:
      type: object
      required:
        - user
        - cookies
      properties:
        user:
          $ref: '#/components/schemas/User'
        cookies:
          $ref: '#/components/schemas/Cookies'
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    PatchUserRequest:
      type: object
      required:
        - user
      properties:
        user:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatar:
              type: string
    PatchUserResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    PostVenueRequest:
      type: object
      required:
        - venue
      properties:
        venue:
          type: object
          required:
            - name
            - location
          properties:
            name:
              type: string
            location:
              $ref: '#/components/schemas/Location'
    PostVenueResponse:
      type: object
      required:
        - venue
      properties:
        venue:
          $ref: '#/components/schemas/Venue'
    User:
      type: object
      required:
        - id
        - email
        - createdAt
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        avatar:
          type: string
    Cookies:
      type: object
      required:
        - session
        - session.sig
      properties:
        session:
          type: string
        session.sig:
          type: string
    Coordinates:
      type: array
      items:
        type: number
      minItems: 2
      maxItems: 2
    GeoType:
      type: string
      enum: [Point]
    GeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          $ref: '#/components/schemas/GeoType'
        coordinates:
          $ref: '#/components/schemas/Coordinates'
    LocationType:
      type: string
      enum: [house, street, district, city, county, country, locality]
    Location:
      type: object
      required:
        - geo
        - name
      properties:
        geo:
          $ref: '#/components/schemas/GeoJSON'
        name:
          type: string
        description:
          type: string
        country:
          type: string
        city:
          type: string
        postcode:
          type: string
        number:
          type: string
        street:
          type: string
        type:
          $ref: '#/components/schemas/LocationType'
    Venue:
      type: object
      required:
        - id
        - createdAt
        - name
        - location
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
